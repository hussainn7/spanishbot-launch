import asyncio
import subprocess
import re

import requests
import telebot
from apscheduler.schedulers.background import BackgroundScheduler
from flask import Flask
from telebot import types
import logging
from g4f.client import Client
import g4f
from config import TOKEN, PRICE, information_about_company
import os
import sqlite3
from gtts import gTTS
import pytube
import speech_recognition as sr
import datetime
import schedule
import time
from googletrans import Translator
from urllib import parse, request
import hashlib

translator = Translator()
# https://www.youtube.com/watch?v=1aA1WGON49E&ab_channel=TEDxTalks

app = Flask(__name__)

logging.basicConfig(level=logging.INFO)

os.environ["PATH"] += os.pathsep + r"C:\ffmpeg\bin"

g4f_client = Client()

INTRODUCTION_MESSAGE = ("¬°Hola! –Ø ‚Äî Tiabaldo, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. Soy Tiabaldo, tu profesor virtual de espa√±ol.")

FREE_PERIOD = 3 * 60  # 10 seconds for testing

ADMIN_USER_ID = 1262676599

bot = telebot.TeleBot(TOKEN)

merchant_login = "tiabaldo_bot"
pass1 = "testh777"
pass2 = "testh777"

robokassa_payment_url = 'https://auth.robokassa.ru/Merchant/Index.aspx'

# Function to calculate MD5 signature
def calculate_signature(*args) -> str:
    joined_string = ':'.join(str(arg) for arg in args)
    return hashlib.md5(joined_string.encode()).hexdigest()

# Function to create a payment link
def generate_payment_link(cost: float, order_id: str, description: str, is_test: int = 1) -> str:
    signature = calculate_signature(merchant_login, cost, order_id, pass1)
    data = {
        'MerchantLogin': merchant_login,
        'OutSum': cost,
        'InvId': order_id,
        'Description': description,
        'SignatureValue': signature,
        'IsTest': is_test
    }
    return f'{robokassa_payment_url}?{parse.urlencode(data)}'

def escape_markdown_v2(text):
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(r'([{}])'.format(re.escape(escape_chars)), r'\\\1', text)


def init_db():
    conn = sqlite3.connect('user_data.db')
    try:
        c = conn.cursor()
        c.execute(
            '''CREATE TABLE IF NOT EXISTS used_free_period (user_id INTEGER PRIMARY KEY)''')
        c.execute(
            '''CREATE TABLE IF NOT EXISTS premium_users (user_id INTEGER PRIMARY KEY, expiration_date TEXT)''')
        c.execute(
            '''CREATE TABLE IF NOT EXISTS payments (user_id INTEGER, payment_id TEXT, PRIMARY KEY (user_id, payment_id))''')
        conn.commit()
    finally:
        conn.close()


def has_used_free_period(user_id):
    conn = sqlite3.connect('user_data.db')
    try:
        c = conn.cursor()
        c.execute(
            'SELECT user_id FROM used_free_period WHERE user_id = ?', (user_id,))
        result = c.fetchone()
    finally:
        conn.close()
    return result is not None


def mark_free_period_used(user_id):
    conn = sqlite3.connect('user_data.db')
    try:
        c = conn.cursor()
        c.execute(
            'INSERT OR IGNORE INTO used_free_period (user_id) VALUES (?)', (user_id,))
        conn.commit()
    finally:
        conn.close()


def is_premium_user(user_id):
    conn = sqlite3.connect('user_data.db')
    try:
        c = conn.cursor()
        c.execute(
            'SELECT expiration_date FROM premium_users WHERE user_id = ?', (user_id,))
        result = c.fetchone()
        if result:
            expiration_date = datetime.datetime.strptime(
                result[0], '%Y-%m-%d %H:%M:%S')
            return expiration_date > datetime.datetime.now()
        else:
            return False
    finally:
        conn.close()


def mark_as_premium(user_id):
    # Placeholder: Implement logic to mark user as premium in your system
    expiration_date = datetime.datetime.now() + datetime.timedelta(days=30)  # Premium subscription for 30 days
    expiration_date_str = expiration_date.strftime('%Y-%m-%d %H:%M:%S')

    conn = sqlite3.connect('user_data.db')
    try:
        c = conn.cursor()
        c.execute('INSERT OR REPLACE INTO premium_users (user_id, expiration_date) VALUES (?, ?)',
                  (user_id, expiration_date_str))
        conn.commit()
    finally:
        conn.close()


def remind_about_subscription():
    conn = sqlite3.connect('user_data.db')
    try:
        c = conn.cursor()
        c.execute('SELECT user_id FROM premium_users WHERE expiration_date < ? AND expiration_date > ?',
                  (datetime.datetime.now() + datetime.timedelta(days=2)).strftime('%Y-%m-%d %H:%M:%S'),
                  datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        users_to_remind = c.fetchall()
        for user_id in users_to_remind:
            bot.send_message(
                user_id, "You have 2 days left until the end of your subscription.")
    finally:
        conn.close()


# Schedule the reminder to run daily
schedule.every().day.at("09:00").do(remind_about_subscription)


def clear_used_free_periods():
    conn = sqlite3.connect('user_data.db')
    try:
        c = conn.cursor()
        c.execute('DELETE FROM used_free_period')
        conn.commit()
    finally:
        conn.close()


def clear_expired_premium_subscriptions():
    conn = sqlite3.connect('user_data.db')
    try:
        c = conn.cursor()
        c.execute('DELETE FROM premium_users WHERE expiration_date < ?',
                  (datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),))
        conn.commit()
    finally:
        conn.close()


def clear_premium_periods():
    conn = sqlite3.connect('user_data.db')
    try:
        c = conn.cursor()
        c.execute('DELETE FROM premium_users')
        conn.commit()
    finally:
        conn.close()


init_db()

user_start_times = {}


def daily_job():
    clear_expired_premium_subscriptions()
    print("Expired premium subscriptions cleared.")


schedule.every().day.at("00:00").do(daily_job)


async def generate_response(text):
    print("Generating response...")
    response = await g4f.ChatCompletion.create_async(
        model=g4f.models.default,
        messages=[{"role": "user", "content": text}],
        provider=g4f.Provider.FreeGpt
    )
    print("Response generated.")
    return response


def voice_to_text(voice_file, language="es-ES"):
    print("Converting voice to text...")
    recognizer = sr.Recognizer()
    with sr.AudioFile(voice_file) as source:
        audio_data = recognizer.record(source)
    try:
        text = recognizer.recognize_google(audio_data, language=language)
        print("Text converted from voice:", text)
        return text
    except sr.UnknownValueError:
        print("Google Speech Recognition could not understand audio")
        return None
    except sr.RequestError:
        print("Could not request results from Google Speech Recognition service")
        return None


def convert_to_wav(audio_file):
    print("Converting audio file to WAV format...")
    wav_file = 'converted_audio.wav'
    subprocess.run(['ffmpeg', '-y', '-i', audio_file, '-acodec', 'pcm_s16le', '-ar', '16000', '-ac', '1', wav_file])
    print("Audio file converted to WAV format.")
    return wav_file



def text_to_speech(text, language="es"):
    print("Converting text to speech...")
    tts = gTTS(text=text, lang=language)
    ogg_file = 'response.ogg'
    tts.save(ogg_file)
    print("Text converted to speech and saved as OGG format.")
    return ogg_file



@bot.message_handler(commands=['start', 'language'])
def start(message):
    user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(row_width=1)

    # Adding language selection options
    markup.add(types.KeyboardButton("üá™üá∏ Espa√±ol"), types.KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π"))

    bot.reply_to(message, "Hola! üåü Elige tu idioma preferido / –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in ["üá™üá∏ Espa√±ol", "üá∑üá∫ –†—É—Å—Å–∫–∏–π"])
def select_language(message):
    language = message.text

    if language == "üá™üá∏ Espa√±ol":
        # Set user language to Spanish
        markup = types.ReplyKeyboardMarkup(row_width=1)
        markup.add(types.KeyboardButton("üöÄ Inicio"),types.KeyboardButton("üÖ∞ Transcripci√≥n"),
                   types.KeyboardButton('üë• Perfil'),
                   types.KeyboardButton("‚ùì ¬øQu√© es eso?"))
        welcome_message = "¬°Hola! Soy Tiabaldo, tu profesor virtual de espa√±ol\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"¬°7 pasos para automatizar el idioma espa√±ol!\n \n" \
"‚úÖ De 20 a 30 veces m√°s barato que los tutores.\n" \
"‚úÖ Pr√°ctica nueva cada d√≠a. ORAL Y AUDITIVA.\n" \
"Lo que m√°s atenci√≥n requiere de los estudiantes.\n" \
"¬°Habla y pregunta al bot todo lo que quieras mediante un mensaje de voz, te responder√° de la misma manera!\n" \
"Si eres principiante, puedes activar la transcripci√≥n y la traducci√≥n por un tiempo.\n" \
"‚úÖ Correcci√≥n de errores incluso en la versi√≥n gratis.\n" \
"‚úÖ Puedes hablar con √©l, practicar temas l√©xicos/gramaticales espec√≠ficos, discutir un art√≠culo, conocer el significado de una palabra (presiona start)\n" \
"‚úÖ Transcripci√≥n de audio y videos de YouTube (Premium)\n" \
"‚úÖ Activar GPT-4 (Premium)\n" \
"‚úÖ M√°s minutos de conversaci√≥n en (Premium)\n \n" \
"‚†Ä‚†Ä‚†Ä\n" \
"¬°Haz clic en el men√∫ y vamos!\n" \
"La suscripci√≥n Premium se encuentra en la secci√≥n <perfil> 499 rublos/mes.\n"

    elif language == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
        # Set user language to Russian
        markup = types.ReplyKeyboardMarkup(row_width=1)
        markup.add(types.KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å"),
                   types.KeyboardButton("üÖ∞ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è"),
                   types.KeyboardButton("üìü–ü–µ—Ä–µ–≤–æ–¥"),
                   types.KeyboardButton('üë• –ü—Ä–æ—Ñ–∏–ª—å'),
                   types.KeyboardButton("‚ùì –ß—Ç–æ —ç—Ç–æ?"))
        welcome_message = "¬°Hola! –Ø ‚Äî Tiabaldo, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
    "7 —à–∞–≥–æ–≤ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!\n" \
"‚úÖ –í 20-30 —Ä–∞–∑ –¥–µ—à–µ–≤–ª–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤.\n" \
"‚úÖ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–æ–≤–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞. –£–°–¢–ù–ê–Ø –ò –ê–£–î–ò–†–û–í–ê–ù–ò–ï.\n" \
"–¢–æ, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è —É –∏–∑—É—á–∞—é—â–∏—Ö.\n" \
"–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –±–æ—Ç–∞ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º —Ç–∞–∫–∂–µ!\n" \
"–ï—Å–ª–∏ –≤—ã –Ω–∞—á–∏–Ω–∞—é—â–∏–π, –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è.\n" \
"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–∞–∂–µ –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ.\n" \
"‚úÖ –ú–æ–∂–Ω–æ —Å –Ω–∏–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å, –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–µ/–≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã, –æ–±—Å—É–¥–∏—Ç—å —Å—Ç–∞—Ç—å—é, —É–∑–Ω–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ (–Ω–∞–∂–∏–º–∞–π start) \n" \
"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ –∏ —Ä–æ–ª–∏–∫–æ–≤ youtube (Premium)\n" \
"‚úÖ –í–∫–ª—é—á–∏—Ç—å GPT-4o (Premium)\n" \
"‚úÖ –ë–æ–ª—å—à–µ –º–∏–Ω—É—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ (Premium)\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"–ñ–º–∏ –º–µ–Ω—é –∏ –ø–æ–µ—Ö–∞–ª–∏!\n" \
"Premium-–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ <–ø—Ä–æ—Ñ–∏–ª—å>.\n" \
"499 —Ä—É–±/–º–µ—Å—è—Ü.\n" \

    bot.send_message(message.chat.id, welcome_message, reply_markup=markup)


translation_enabled = False


# Define a dictionary to store the announcement messages
announcement_messages = {}

# Handler for the /announce command
@bot.message_handler(commands=['announce'])
def start_announcement(message):
    # Set the user's state to 'waiting_for_announcement'
    user_id = message.from_user.id
    announcement_messages[user_id] = ''
    bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤—Å–µ–º —Ä–∞–∑–æ—Å–ª–∞—Ç—å.")

# Handler for receiving the announcement message
@bot.message_handler(func=lambda message: message.from_user.id in announcement_messages and announcement_messages[message.from_user.id] == '' and notification_preferences.get(message.from_user.id, True))
def receive_announcement(message):
    user_id = message.from_user.id
    announcement_message = message.text
    # Save the announcement message
    announcement_messages[user_id] = announcement_message
    bot.send_message(user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É...")

    # Proceed with the announcement process
    send_announcement_to_all(user_id)

def send_announcement_to_all(user_id):
    # Fetch all users
    conn = sqlite3.connect('user_data.db')
    try:
        c = conn.cursor()
        c.execute('SELECT user_id FROM used_free_period')
        users = c.fetchall()
    finally:
        conn.close()

    # Send the announcement to users who have notifications enabled
    for user in users:
        if notification_preferences.get(user[0], True):
            bot.send_message(user[0], announcement_messages[user_id])

    # Inform the admin about the successful announcement
    bot.send_message(user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")



@bot.message_handler(func=lambda message: message.text == "üÖ∞ Transcripci√≥n")
def toggle_transcription(message):
    global translation_enabled

    translation_enabled = not translation_enabled

    if translation_enabled:
        bot.reply_to(message, "La transcripci√≥n est√° activada. Los mensajes de voz se transcribir√°n.")
    else:
        bot.reply_to(message, "La transcripci√≥n est√° desactivada.")

@bot.message_handler(func=lambda message: message.text == "üÖ∞ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è")
def toggle_transcription(message):
    global translation_enabled

    translation_enabled = not translation_enabled

    if translation_enabled:
        bot.reply_to(message, "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞. –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
    else:
        bot.reply_to(message, "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞.")

# Handler for the "Translation" button
@bot.message_handler(func=lambda message: message.text == "üìü–ü–µ—Ä–µ–≤–æ–¥")
def toggle_translation(message):
    global translation_enabled
    translation_enabled = not translation_enabled
    if translation_enabled:
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω. –í—Å–µ –∏—Å–ø–∞–Ω—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π.")
    else:
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω.")


@bot.message_handler(func=lambda message: message.text == 'üöÄ Inicio')
def start_button(message):
    markup_start = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    markup_start.add(types.KeyboardButton('solo charlar'), types.KeyboardButton("palabra"),
                     types.KeyboardButton('practicar temas'), types.KeyboardButton("la transcripci√≥n"),
                     types.KeyboardButton("parafrasear"), types.KeyboardButton('art√≠culo de actualidad'),
                     types.KeyboardButton("aprender espa√±ol"), types.KeyboardButton('üîô Volver al men√∫ principal'))
    bot.reply_to(message, "Hola, soy tu profesor de espa√±ol. Preg√∫ntame lo que quieras.", reply_markup=markup_start)


@bot.message_handler(func=lambda message: message.text == 'üìù Audio a texto')
def handle_transcribe_button(message):
    user_id = message.from_user.id
    if not is_premium_user(user_id):
        bot.reply_to(message, "Esta funci√≥n s√≥lo est√° disponible para usuarios Premium.")
    else:
        msg = bot.reply_to(message, "Proporcione la URL de YouTube para la transcripci√≥n:")
        bot.register_next_step_handler(msg, transcribe_youtube_video)


@bot.message_handler(func=lambda message: message.text == '‚ùì –ß—Ç–æ —ç—Ç–æ?')
def who_are_we(message):
    markup_who = types.ReplyKeyboardMarkup(row_width=1)
    markup_who.add(types.KeyboardButton('üë´ –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è'), types.KeyboardButton("üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"),
                   types.KeyboardButton("üéì –û–±—É—á–µ–Ω–∏–µ"), types.KeyboardButton('üìí –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'),
                   types.KeyboardButton("üí° –ò–¥–µ–∏ –∫ —É–ª—É—á—à–µ–Ω–∏—é"), types.KeyboardButton("üíÉ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º"),
                   types.KeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    bot.reply_to(message, information_about_company, reply_markup=markup_who)


@bot.message_handler(func=lambda message: message.text == 'üéì –û–±—É—á–µ–Ω–∏–µ')
def start_button(message):
    bot.reply_to(message, "üá™üá∏üéì –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, —á–µ—Ä–µ–∑ —Ç–µ–µ–≥—Ä–∞–º —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"–ê–±–æ–Ω–µ–º–µ–Ω—Ç B√°sico —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤–∫–ª—é—á–∞–µ—Ç:\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: –≤ –≥—Ä—É–ø–ø–µ (8 –∑–∞–Ω—è—Ç–∏–π –≤ –º–µ—Å—è—Ü), –º–∏–Ω–∏-–≥—Ä—É–ø–ø–µ –∏–ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.\n" \
"‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∫–ª—É–± –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö –≤ –≤—Å.\n" \
"‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ú–ê–¢–ï–†–ò–ê–õ–û–í –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è (—Ä–∞—Å–ø–µ—á–∞—Ç–∫–∏, —Ñ–∏—à–µ—á–∫–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏, –∞—É–¥–∏–æ-–≤–∏–¥–µ–æ —Å–±–æ—Ä–Ω–∏–∫–∏).\n" \
"‚úÖ –ü–û–î–ü–ò–°–ö–£ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –û–ù–õ–ê–ô–ù –ü–õ–ê–¢–§–û–†–ú–£ APRENDEMICA –≤ –ø–æ–¥–∞—Ä–æ–∫: —Ç–µ–æ—Ä–∏—è, –ø—Ä–∞–∫—Ç–∏–∫–∞ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∏–¥—É—â–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø—Ä–æ–ø—É—Å—Ç–∏–≤—à–∏—Ö –∏ —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –±–æ–ª—å—à–µ.\n" \
"‚úÖ –î–æ—Å—Ç—É–ø –∫ –ë–ò–ë–õ–ò–û–¢–ï–ö–ï –∫–Ω–∏–≥, –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ –≤ –∂–∏–≤—É—é –∏ –æ–Ω–ª–∞–π–Ω.\n" \
"‚úÖ –ê —Ç–∞–∫–∂–µ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –∂–µ–ª–∞–Ω–∏—é –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞.\n" \
"‚úÖ –°–û–û–ë–©–ï–°–¢–í–û –ª—é–±–∏—Ç–µ–ª–µ–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –∏ –Ω–æ—Å–∏—Ç–µ–ª–µ–π –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –û–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ –∏/–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ ü§ó\n" \
"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∂–¥—ã–º –∏–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å —è–∑—ã–∫–æ–º, –æ–±—É—á–µ–Ω–∏–µ–º, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏, –∫—É–ª—å—Ç—É—Ä–æ–π, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º–∏, –æ–±—É—á–µ–Ω–∏–µ–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π, —Å –æ–≥—Ä–æ–º–Ω—ã–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–¥–µ–ª–∏–º—Å—è –æ–ø—ã—Ç–æ–º –∏ –∑–Ω–∞–Ω–∏—è–º–∏ —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: aprendemica.com")


@bot.message_handler(func=lambda message: message.text == 'üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã')
def start_button(message):
    bot.reply_to(message, "¬°Hola! Adoramos la creatividad y clases vivas\n" \
"–ú—ã –æ–±–æ–∂–∞–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∂–∏–≤—ã–µ —É—Ä–æ–∫–∏ ‚ù§Ô∏è\n" \
"–° –æ–∫—Ç—è–±—Ä—è 2007 –≥–æ–¥–∞ –º—ã —Å–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –ª—é–±–æ–≤—å—é, —á—Ç–æ–±—ã –∏–∑—É—á–µ–Ω–∏–µ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Å–∞–º—ã–º –∫—Ä–∞—Å–∏–≤—ã–º —è–∑—ã–∫–æ–º –º–∏—Ä–∞ –±—ã–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏. \n" \
"‚†Ä‚†Ä‚†Ä\n" \
"üìí –£ –Ω–∞—Å –µ—Å—Ç—å –∫–∞–∫ –ø–µ—á–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ –æ–∑–æ–Ω (https://www.ozon.ru/seller/akademiya-ispanskogo-yazyka-545110/products/?miniapp=seller_545110), –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:\n" \
"üî∏ –†–∞–±–æ—á–∞—è —Ç–µ—Ç—Ä–∞–¥—å –ø–æ –ò—Å–ø–∞–Ω—Å–∫–æ–º—É —è–∑—ã–∫—É GRAM√ÅTICA M√ÅGICA\n" \
"üî∏ –ü–ª–∞–Ω–µ—Ä –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º (https://t.me/estrella_moretti/13)\n" \
"üî∏ –ö–∞—Ä—Ç–æ—á–∫–∏ ¬´110 —Å–∞–º—ã—Ö —É–ø–æ—Ç—Ä–µ–±–∏–º—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞¬ª\n" \
"üî∏ –ë—Ä–µ–ª–æ–∫–∏ –∏—Å–ø–∞–Ω—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏\n" \
"...\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"P.D.: –ï—Å–ª–∏ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞ –æ–∑–æ–Ω–µ, –∞ –≤–∞–º –Ω–∞–¥–æ —Å—Ä–æ—á–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ —Å–∫–ª–∞–¥–µ –µ—â—ë –Ω–µ –≤—ã—Å—Ç–∞–≤–∏–ª–∏, –∞ —É –Ω–∞—Å –µ—Å—Ç—å.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"üìí –ò —Ü–∏—Ñ—Ä–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (https://boosty.to/estrellamoretti) –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ –≤ –∫–ª—É–±–µ –∏—Å–ø–∞–Ω–∏—Å—Ç–æ–≤ (https://t.me/estrella_moretti/21) –¥–ª—è —É—Ä–æ–∫–æ–≤ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö –∫–ª—É–±–æ–≤.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"–ö–∞–∂–¥—ã–π —Ä–∞–∑ –≤—ã—Ö–æ–¥–∏—Ç —Ä–∞–∑–±–æ—Ä –∏ –∑–∞–¥–∞–Ω–∏—è –∫ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–µ, –≤–∏–¥–µ–æ, –∂–∞—Ä–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é! üòç –ú–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Å—è—á–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç–¥–µ–ª—å–Ω–æ.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"üî∏ –ú–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–æ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å–º—ã\n" \
"üî∏ –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã\n" \
"üî∏ –ü–æ–¥–±–æ—Ä–∫–∞ –≤–∏–¥–µ–æ –ø—Ä–æ —Ä–æ–∂–¥–µ—Å—Ç–≤–æ\n" \
"üî∏ Inteligencia emocional y frases t√≥xicas\n" \
"üî∏ –¶–µ–ª–∏\n" \
"üî∏ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"‚úîÔ∏è –ò—Å–ø–∞–Ω—Å–∫–∏–π –ø–æ –ø–µ—Å–Ω—è–º https://t.me/estrella_moretti/18")


@bot.message_handler(func=lambda message: message.text == 'üíÉ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º')
def start_button(message):
    bot.reply_to(message, "–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –∫–ª—É–±—ã: –ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∫–ª—É–± —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ –¥–ª—è –≤—Å–µ—Ö –ª—é–±–∏—Ç–µ–ª–µ–π –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ, –≤–∫–ª—é—á–∞—è –Ω–æ—Å–∏—Ç–µ–ª–µ–π —è–∑—ã–∫–∞ –∏ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"–ö–∏–Ω–æ–∫–ª—É–±: –ú—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –∫–∏–Ω–æ-–≤–µ—á–µ—Ä–∞, –≥–¥–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å–º—ã –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º —è–∑—ã–∫–µ. –≠—Ç–∏ —Å–µ–∞–Ω—Å—ã –≤–∫–ª—é—á–∞—é—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–µ–≥–ª–æ—Å—Ç–∏ —Ä–µ—á–∏.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã: –ü—Ä–∏–º–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ –Ω–∞—à–∏—Ö –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞—Ö –∏ –Ω–∞—É—á–∏—Ç–µ—Å—å –≥–æ—Ç–æ–≤–∏—Ç—å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –±–ª—é–¥–∞ –ò—Å–ø–∞–Ω–∏–∏ –∏ –õ–∞—Ç–∏–Ω—Å–∫–æ–π –ê–º–µ—Ä–∏–∫–∏, –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∞–∫—Ç–∏–∫—É—è –∏—Å–ø–∞–Ω—Å–∫–∏–π.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"–£—á–µ–±–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏: –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—á–µ–±–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏ –≤ –ò—Å–ø–∞–Ω–∏—é –∏ —Å—Ç—Ä–∞–Ω—ã –õ–∞—Ç–∏–Ω—Å–∫–æ–π –ê–º–µ—Ä–∏–∫–∏. –≠—Ç–∏ –ø–æ–µ–∑–¥–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞–º –ø–æ–≥—Ä—É–∂–∞—Ç—å—Å—è –≤ –∫—É–ª—å—Ç—É—Ä—É –∏ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —è–∑—ã–∫ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"–ö–ª—É–±—ã –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º —Å–µ—Å—Å–∏—è–º –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º —è–∑—ã–∫–µ, —ç—Ç–æ –≤–µ—Å–µ–ª—ã–π –∏ –¥–∏–Ω–∞–º–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —è–∑—ã–∫ –≤ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"–ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: –û–ø–∏—Å–∞–Ω–∏–µ: –ú—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Ç–∞–∫–∏–µ –∫–∞–∫ —Ñ–µ—Å—Ç–∏–≤–∞–ª–∏, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã, –≥–¥–µ –ø—Ä–∞–∑–¥–Ω—É–µ—Ç—Å—è –∫—É–ª—å—Ç—É—Ä–∞ –∏—Å–ø–∞–Ω–æ—è–∑—ã—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"‚û° –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º —è–∑—ã–∫–µ\n" \
"https://t.me/aprendemica")


@bot.message_handler(func=lambda message: message.text == 'üìí –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏')
def start_button(message):
    bot.reply_to(message, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º:\n" \
"–ü–æ–º–æ—â—å –≤ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤, —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Ä–µ—à–µ–Ω–∏–∏ —Å–∏—Ç—É–∞—Ü–∏–π.\n" \
"–°—Ç—É–¥–µ–Ω—Ç–∞–º –ø–æ–º–æ—â—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –ø–æ–¥–±–æ—Ä —Ö–æ—Ä–æ—à–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: aprendemica.com")


@bot.message_handler(func=lambda message: message.text == 'üë´ –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è')
def start_button(message):
    bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∏—Ä –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ Aprendemica üá™üá∏üéì. –ú—ã - —Ü–µ–Ω—Ç—Ä –∏—Å–ø–∞–Ω–æ—è–∑—ã—á–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã, –≥–¥–µ –ò—Å–ø–∞–Ω–∏—è –∏ –õ–∞—Ç–∏–Ω—Å–∫–∞—è –ê–º–µ—Ä–∏–∫–∞ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ–ø—ã—Ç –∏–∑—É—á–µ–Ω–∏—è –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∞ –Ω–∞—à–µ–π –ê–∫–∞–¥–µ–º–∏–∏ üåç. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª–Ω—ã–µ –∫—É—Ä—Å—ã –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π üìö, —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Ç–∞–∫–∏—Ö –∂–µ —É–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π: —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –∫–ª—É–±—ã üí¨, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã üé®, –∫–∏–Ω–æ-–≤–µ—á–µ—Ä–∞ üé•, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è ‚úàÔ∏è –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"–ù–∞—à–∞ —Ü–µ–ª—å - –Ω–µ —Ç–æ–ª—å–∫–æ –æ–±—É—á–∏—Ç—å –≤–∞—Å —è–∑—ã–∫—É, –Ω–æ –∂–∏—Ç—å –∏–º üåü. –ö–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –±—É–¥—å —Ç–æ –≤ –≥—Ä—É–ø–ø–µ üë•, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ üßë‚Äçüè´ –∏–ª–∏ –æ–Ω–ª–∞–π–Ω üíª, –Ω–∞ 70% —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–æ –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ üó£Ô∏è. –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—Å, —á—Ç–æ–±—ã –≤—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É—Å–≤–∞–∏–≤–∞–ª–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–ª–∏ —è–∑—ã–∫ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö. –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ–±—à–∏—Ä–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ üìñ, –≤–∫–ª—é—á–∞—è –∫–Ω–∏–≥–∏, –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ, –∫–∞–∫ –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º, —Ç–∞–∫ –∏ –≤ –æ–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–∞—Ç–µ. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –Ω–∞—à–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –≤ –ø–æ–¥–∞—Ä–æ–∫ –∫ –Ω–∞—à–µ–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ APRENDEMICA üì≤, –≤–∫–ª—é—á–∞—é—â–µ–π —Ç–µ–æ—Ä–∏—é, –ø—Ä–∞–∫—Ç–∏–∫—É –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã üìë.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"‚úÖ –ü—Ä–∞–∫—Ç–∏–∫–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:\n" \
"https://t.me/aprendemica\n" \
"‚úÖ –°–æ–≤–µ—Ç—ã –∏ —Ç—Ä—é–∫–∏ –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤:\n" \
"https://goo.gl/jnejS1\n" \
"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∏ –ø–µ—á–∞—Ç–Ω—ã–µ –∏–∑–¥–∞–Ω–∏—è \n" \
"https://aprendemica.online\n" \
"‚úî –ü–æ–µ–∑–¥–∫–∏, –º–µ—Ç–æ–¥–∏–∫–∞, –∏—Å—Ç–æ—Ä–∏–∏\n" \
"https://instagram.com/club_espanol\n" \
"‚úî –ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ –≤–∫, —Å—Ç—É–¥–µ–Ω—Ç—ã, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏, –∫–∏–Ω–æ-–∫–ª—É–±—ã, –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –∫–ª—É–±—ã, –π–æ–≥–∞ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º.\n" \
"https://vk.com/la_escuela\n" \
"‚ù§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è —É–∂–µ —á–µ—Ä–µ–∑ 1-3 –º–µ—Å—è—Ü–∞:\n" \
"https://vk.cc/cqjrkX  \n" \
"‚ù§ –û—Ç–∑—ã–≤—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: \n" \
"https://vk.com/topic-39169507_36969197 ")


@bot.message_handler(func=lambda message: message.text == 'üí° –ò–¥–µ–∏ –∫ —É–ª—É—á—à–µ–Ω–∏—é')
def prompt_for_idea(message):
    # Create a keyboard with a "Cancel" button
    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))

    msg = bot.reply_to(message,
                       "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ—é –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥:",
                       reply_markup=markup)
    bot.register_next_step_handler(msg, handle_idea_or_cancel)


##############################################################################################################################################################

@bot.message_handler(func=lambda message: message.text == '‚ùì ¬øQu√© es eso?')
def who_are_we(message):
    markup_who = types.ReplyKeyboardMarkup(row_width=1)
    markup_who.add(types.KeyboardButton('üë´ Quienes somos'), types.KeyboardButton("üìö Materiales"),
                   types.KeyboardButton("üéì Aprender idiomas"), types.KeyboardButton('üìí Consultas'),
                   types.KeyboardButton("üí° Ideas para mejorar"), types.KeyboardButton("üíÉ Eventos en espa√±ol"),
                   types.KeyboardButton('üîô Volver al men√∫ principal'))
    bot.reply_to(message, information_about_company, reply_markup=markup_who)


@bot.message_handler(func=lambda message: message.text == 'üéì Aprender idiomas')
def start_button(message):
    bot.reply_to(message, "üá™üá∏üéì La formaci√≥n se realiza en grupos, individualmente, a trav√©s de Telegram con un mentor y de forma aut√≥noma en la plataforma educativa.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"El abono B√°sico para miembros de nuestra comunidad incluye:\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"‚úÖ Educaci√≥n de calidad: en grupo (8 clases al mes), mini-grupo o individualmente.\n" \
"‚úÖ Club de conversaci√≥n gratuito para avanzados los domingos.\n" \
"‚úÖ Una gran cantidad de MATERIALES durante el estudio (impresos, trucos de ense√±anza, metodolog√≠as efectivas, colecciones de audio y video).\n" \
"‚úÖ SUSCRIPCI√ìN de regalo a la PLATAFORMA ONLINE EDUCATIVA APRENDEMICA: teor√≠a, pr√°ctica y materiales que van en paralelo al programa, √∫til para los que se pierden clases y para aquellos que quieren m√°s.\n" \
"‚úÖ Acceso a la BIBLIOTECA de libros, videos y audio en vivo y online.\n" \
"‚úÖ As√≠ como la suscripci√≥n opcional a la tecnolog√≠a de aprendizaje de idiomas.\n" \
"‚úÖ COMUNIDAD de aficionados, profesionales y hablantes nativos de espa√±ol. EVENTOS pagados y/o gratuitos para la pr√°ctica ü§ó\n" \
"‚úÖ Apoyo de cada uno de los profesores en temas relacionados con el idioma, la ense√±anza, eventos, cultura, viajes, estudios en el extranjero, compartiremos con gusto nuestra experiencia y conocimientos con personas afines.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"M√°s informaci√≥n: aprendemica.com")


@bot.message_handler(func=lambda message: message.text == 'üìí Consultas')
def start_button(message):
    bot.reply_to(message, "Consultas para profesores y estudiantes:\n" \
"Ayuda en la planificaci√≥n de lecciones, creaci√≥n de materiales, resoluci√≥n de situaciones.\n" \
"A los estudiantes, ayuda en la organizaci√≥n de un aprendizaje efectivo, selecci√≥n de buenos materiales y fuentes.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"M√°s informaci√≥n: aprendemica.com")


@bot.message_handler(func=lambda message: message.text == 'üë´ Quienes somos')
def start_button(message):
    bot.reply_to(message, "Bienvenido al Mundo de Espa√±ol Aprendemica üá™üá∏üéì. Somos un centro de cultura hispanohablante, donde Espa√±a y Am√©rica Latina se encuentran para ofrecerte una experiencia completa de aprendizaje del espa√±ol en nuestra academia üåç. Ofrecemos cursos completos de todos los niveles üìö, comunidad de personas igualmente apasionadas: clubes de conversaci√≥n üí¨, talleres culturales üé®, noches de cine üé•, viajes ‚úàÔ∏è y mucho m√°s.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"Nuestro objetivo no es solo ense√±arte el idioma, sino tambi√©n vivirlo üåü. Cada clase, ya sea en grupo üë•, individual üßë‚Äçüè´ o en l√≠nea üíª, se enfoca en un 70% en la pr√°ctica oral üó£Ô∏è. Los profesores te guiar√°n para que adquieras y apliques el idioma de manera efectiva en situaciones reales. Ofrecemos acceso a una biblioteca extensa de materiales did√°cticos üìñ, incluyendo libros, videos y audios, tanto en formato f√≠sico como en l√≠nea. Adem√°s, nuestros estudiantes tienen acceso gratuito a nuestra plataforma educativa en l√≠nea APRENDEMICA üì≤, que incluye teor√≠a, pr√°ctica y materiales adicionales üìë.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"‚úÖ Pr√°cticas y calendario de eventos:\n" \
"https://t.me/aprendemica\n" \
"‚úÖ Consejos y trucos para el aprendizaje de idiomas:\n" \
"https://goo.gl/jnejS1\n" \
"‚úÖ Materiales electr√≥nicos y publicaciones impresas\n" \
"https://aprendemica.online\n" \
"‚úî Viajes, metodolog√≠a, historias\n" \
"https://instagram.com/club_espanol\n" \
"‚úî Nuestro grupo en VK, estudiantes, profesores, clubes de cine, clubes culinarios, clubes de conversaci√≥n, yoga en espa√±ol.\n" \
"https://vk.com/la_escuela\n" \
"‚ù§ Resultados de aprendizaje en solo 1-3 meses:\n" \
"https://vk.cc/cqjrkX  \n" \
"‚ù§ Opiniones y resultados: \n" \
"https://vk.com/topic-39169507_36969197 ")


@bot.message_handler(func=lambda message: message.text == 'üìö Materiales')
def start_button(message):
    bot.reply_to(message, "¬°Hola! Adoramos la creatividad y clases vivas\n" \
"–ú—ã –æ–±–æ–∂–∞–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∂–∏–≤—ã–µ —É—Ä–æ–∫–∏ ‚ù§Ô∏è\n" \
"–° –æ–∫—Ç—è–±—Ä—è 2007 –≥–æ–¥–∞ –º—ã —Å–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –ª—é–±–æ–≤—å—é, —á—Ç–æ–±—ã –∏–∑—É—á–µ–Ω–∏–µ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Å–∞–º—ã–º –∫—Ä–∞—Å–∏–≤—ã–º —è–∑—ã–∫–æ–º –º–∏—Ä–∞ –±—ã–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏. \n" \
"‚†Ä‚†Ä‚†Ä\n" \
"üìí –£ –Ω–∞—Å –µ—Å—Ç—å –∫–∞–∫ –ø–µ—á–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ –æ–∑–æ–Ω (https://www.ozon.ru/seller/akademiya-ispanskogo-yazyka-545110/products/?miniapp=seller_545110), –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:\n" \
"üî∏ –†–∞–±–æ—á–∞—è —Ç–µ—Ç—Ä–∞–¥—å –ø–æ –ò—Å–ø–∞–Ω—Å–∫–æ–º—É —è–∑—ã–∫—É GRAM√ÅTICA M√ÅGICA\n" \
"üî∏ –ü–ª–∞–Ω–µ—Ä –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º (https://t.me/estrella_moretti/13)\n" \
"üî∏ –ö–∞—Ä—Ç–æ—á–∫–∏ ¬´110 —Å–∞–º—ã—Ö —É–ø–æ—Ç—Ä–µ–±–∏–º—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞¬ª\n" \
"üî∏ –ë—Ä–µ–ª–æ–∫–∏ –∏—Å–ø–∞–Ω—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏\n" \
"...\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"P.D.: –ï—Å–ª–∏ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞ –æ–∑–æ–Ω–µ, –∞ –≤–∞–º –Ω–∞–¥–æ —Å—Ä–æ—á–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ —Å–∫–ª–∞–¥–µ –µ—â—ë –Ω–µ –≤—ã—Å—Ç–∞–≤–∏–ª–∏, –∞ —É –Ω–∞—Å –µ—Å—Ç—å.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"üìí –ò —Ü–∏—Ñ—Ä–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (https://boosty.to/estrellamoretti) –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ –≤ –∫–ª—É–±–µ –∏—Å–ø–∞–Ω–∏—Å—Ç–æ–≤ (https://t.me/estrella_moretti/21) –¥–ª—è —É—Ä–æ–∫–æ–≤ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö –∫–ª—É–±–æ–≤.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"–ö–∞–∂–¥—ã–π —Ä–∞–∑ –≤—ã—Ö–æ–¥–∏—Ç —Ä–∞–∑–±–æ—Ä –∏ –∑–∞–¥–∞–Ω–∏—è –∫ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–µ, –≤–∏–¥–µ–æ, –∂–∞—Ä–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é! üòç –ú–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Å—è—á–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç–¥–µ–ª—å–Ω–æ.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"üî∏ –ú–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–æ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å–º—ã\n" \
"üî∏ –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã\n" \
"üî∏ –ü–æ–¥–±–æ—Ä–∫–∞ –≤–∏–¥–µ–æ –ø—Ä–æ —Ä–æ–∂–¥–µ—Å—Ç–≤–æ\n" \
"üî∏ Inteligencia emocional y frases t√≥xicas\n" \
"üî∏ –¶–µ–ª–∏\n" \
"üî∏ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"‚úîÔ∏è –ò—Å–ø–∞–Ω—Å–∫–∏–π –ø–æ –ø–µ—Å–Ω—è–º https://t.me/estrella_moretti/18")


@bot.message_handler(func=lambda message: message.text == 'üíÉ Eventos en espa√±ol')
def start_button(message):
    bot.reply_to(message, "Clubs de Conversaci√≥n: Cada domingo en Krasnodar, se celebra un club de conversaci√≥n en espa√±ol. Este evento es gratuito y abierto a todos los amantes del idioma espa√±ol, incluidos hablantes nativos y aficionados.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"Cineclub: Organizamos noches de cine donde se proyectan pel√≠culas en espa√±ol. Estas sesiones incluyen discusiones sobre las pel√≠culas para mejorar la comprensi√≥n auditiva y la fluidez en el idioma.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"Talleres Culinarios: Participa en nuestros talleres de cocina y aprende a preparar platos t√≠picos de Espa√±a y Am√©rica Latina mientras practicas el espa√±ol.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"Viajes Educativos: Ofrecemos viajes educativos a Espa√±a y pa√≠ses de Am√©rica Latina. Estos viajes permiten a los estudiantes sumergirse en la cultura y practicar el idioma en un entorno real.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"Juegos de Mesa y Clubes de Juegos: √önete a nuestras sesiones de juegos de mesa en espa√±ol, una forma divertida y din√°mica de practicar el idioma en un ambiente relajado.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"Eventos Culturales: Organizamos diversos eventos culturales, como festivales, presentaciones y conciertos, donde se celebra la cultura hispanohablante.\n" \
"‚†Ä‚†Ä‚†Ä\n" \
"‚û° Todos los eventos en espa√±ol:\n" \
"https://t.me/aprendemica")


@bot.message_handler(func=lambda message: message.text == 'üí° Ideas para mejorar')
def prompt_for_idea(message):
    # Create a keyboard with a "Cancel" button
    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    markup.add(types.KeyboardButton('Cancelar'))

    msg = bot.reply_to(message,
                       "Escriba su idea para mejorar nuestro servicio o haga clic en ¬´Cancelar¬ª para volver atr√°s:",
                       reply_markup=markup)
    bot.register_next_step_handler(msg, handle_idea_or_cancel)


def handle_idea_or_cancel(message):
    if message.text.lower() == 'Cancelar':
        bot.send_message(message.chat.id, "Su solicitud se ha cancelado correctamente.")
        start(message)
    else:
        forward_idea_to_admin(message)


########################################################################################################################################################

def forward_idea_to_admin(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    user_idea = message.text

    # Format the user info
    user_info = f"User ID: {user_id}\n"
    if username:
        user_info += f"Username: @{username}\n"
    if first_name or last_name:
        user_info += f"Name: {first_name} {last_name}\n"

    # Format the message to include user info and their idea
    admin_message = f"–ë—ã–ª–∞ –ø–æ–¥–∞–Ω–∞ –∏–¥–µ—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–µ—Ä–≤–∏—Å–∞:\n\n{user_idea}\n\n–û—Ç:\n{user_info}"

    # Send the idea to the admin
    bot.send_message(ADMIN_USER_ID, admin_message)

    markup = types.ReplyKeyboardMarkup(row_width=1)
    markup.add(types.KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å"),
               types.KeyboardButton('üë• –ü—Ä–æ—Ñ–∏–ª—å'), types.KeyboardButton("üìü–ü–µ—Ä–µ–≤–æ–¥"),
               types.KeyboardButton("üÖ∞ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è"),
               types.KeyboardButton("‚ùì –ß—Ç–æ —ç—Ç–æ?"))

    # Confirm receipt to the user
    bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –í–∞—à–∞ –∏–¥–µ—è –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É.", reply_markup = markup)


@bot.message_handler(func=lambda message: message.text == 'üöÄ –ù–∞—á–∞—Ç—å')
def start_button(message):
    markup_start = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    markup_start.add(types.KeyboardButton('–ü–æ–±–æ–ª—Ç–∞—Ç—å'), types.KeyboardButton("–ü—Ä–æ —Å–ª–æ–≤–æ"),
                     types.KeyboardButton('–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —Ç–µ–º—ã'), types.KeyboardButton("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è"),
                     types.KeyboardButton("–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å"), types.KeyboardButton('–ü—Ä–æ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é'),
                     types.KeyboardButton("–£—á–∏—Ç—å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏"), types.KeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç, —è –≤–∞—à —É—á–∏—Ç–µ–ª—å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ. –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ —á–µ–º —É–≥–æ–¥–Ω–æ.", reply_markup=markup_start)


# New handler for the 'Transcribe' feature
@bot.message_handler(func=lambda message: message.text == 'üìù –ê—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç')
def handle_transcribe_button(message):
    user_id = message.from_user.id
    if not is_premium_user(user_id):
        bot.reply_to(message, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        msg = bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL-–∞–¥—Ä–µ—Å YouTube –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:")
        bot.register_next_step_handler(msg, transcribe_youtube_video)


def transcribe_youtube_video(message):
    user_id = message.from_user.id
    youtube_url = message.text

    try:
        # Step 1: Download YouTube video
        bot.reply_to(message, "–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...")
        yt = pytube.YouTube(youtube_url)
        video = yt.streams.filter(only_audio=True).first()
        video_file = video.download(filename="youtube_audio.mp4")

        # Step 2: Extract audio from video using ffmpeg
        bot.reply_to(message, "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–≤—É–∫–∞ –∏–∑ –≤–∏–¥–µ–æ...")
        audio_file = "youtube_audio.wav"
        subprocess.run(
            ['ffmpeg', '-i', video_file, '-vn', '-acodec', 'pcm_s16le', '-ar', '16000', '-ac', '1', audio_file])

        # Step 3: Convert audio to text
        bot.reply_to(message, "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...")
        recognizer = sr.Recognizer()
        with sr.AudioFile(audio_file) as source:
            audio_data = recognizer.record(source)
            # Specify the language for recognition (Spanish in this case)
            text = recognizer.recognize_google(audio_data, language="es-ES")

        # Step 4: Send the transcription back to the user
        bot.reply_to(message, f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n\n{text}")

        # Cleanup: Remove downloaded and processed files
        os.remove(video_file)
        os.remove(audio_file)

    except Exception as e:
        bot.reply_to(message, f"An error occurred: {e}")


#####################################################################################################################################################
# Profile button handler
@bot.message_handler(func=lambda message: message.text == 'üë• Perfil')
def handle_profile_button(message):
    user_id = message.from_user.id
    markup_profile = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    markup_profile.add(types.KeyboardButton('‚õ≥Activar GPT-4o'), types.KeyboardButton('üìù Audio a texto'),types.KeyboardButton("üåé Idioma"),
                       types.KeyboardButton('üîÑ Reinicie'), types.KeyboardButton("üíéPremium"),
                       types.KeyboardButton('üîô Volver al men√∫ principal'))
    if is_premium_user(user_id):
        bot.reply_to(message, "Su situaci√≥n: Premium", reply_markup=markup_profile)
    else:
        bot.reply_to(message, "Su situaci√≥n: Free", reply_markup=markup_profile)


@bot.message_handler(func=lambda message: message.text == 'üîÑ Reinicie')
def handle_transcribe_button(message):
    markup = types.ReplyKeyboardMarkup(row_width=1)
    markup.add(types.KeyboardButton("üöÄ Inicio"), types.KeyboardButton("üÖ∞ Transcripci√≥n"),
               types.KeyboardButton('üë• Perfil'),
               types.KeyboardButton("‚ùì ¬øQu√© es eso?"))
    time.sleep(3)
    bot.reply_to(message, 'El reinicio se ha realizado correctamente ‚ôªÔ∏è', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üíéPremium')
def handle_transcribe_button(message):
    user_id = message.from_user.id
    if is_premium_user(user_id):
        bot.reply_to(message, "Ya tiene premium, ¬°enhorabuena!")
    else:
        msg = bot.reply_to(message, "Premium es muy √∫til: \n ‚úÖ Transcricpi√≥n de los videos de youtube (Premium)\n ‚úÖ Activar GPT-4o (Premium)\n ‚úÖ M√°s conversaci√≥n (Premium)\n" )
        bot.reply_to(message, msg)


@bot.message_handler(func=lambda message: message.text == '‚õ≥Activar GPT-4o')
def handle_transcribe_button(message):
    markup = types.ReplyKeyboardMarkup(row_width=1)
    markup.add(types.KeyboardButton("üöÄ Inicio"), types.KeyboardButton("üÖ∞ Transcripci√≥n"),
               types.KeyboardButton('üë• Perfil'),
               types.KeyboardButton("‚ùì ¬øQu√© es eso?"))
    user_id = message.from_user.id
    if not is_premium_user(user_id):
        bot.reply_to(message, "Esta funci√≥n s√≥lo est√° disponible para usuarios Premium.", reply_markup=markup)
    else:
        msg = bot.reply_to(message, "Activar GPT-4o\nM√°s r√°pido y fiable")


@bot.message_handler(func=lambda message: message.text == 'üîô Volver al men√∫ principal')
def back_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=1)
    markup.add(types.KeyboardButton("üöÄ Inicio"), types.KeyboardButton('üìù Audio a texto'),
               types.KeyboardButton('üë• Perfil'),
               types.KeyboardButton("‚ùì ¬øQu√© es eso?"))
    bot.reply_to(message, "Hola, soy tu profesor de espa√±ol. Preg√∫ntame lo que quieras.", reply_markup=markup)


#######################################################################################################################################

notification_preferences = {}


@bot.message_handler(func=lambda message: message.text == 'üë• –ü—Ä–æ—Ñ–∏–ª—å')
def handle_profile_button(message):
    user_id = message.from_user.id
    markup_profile = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    markup_profile.add(types.KeyboardButton('‚õ≥–í–∫–ª—é—á–∏—Ç—å GPT-4o'), types.KeyboardButton('üìù –ê—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç'),
                       types.KeyboardButton("üåé –Ø–∑—ã–∫"), types.KeyboardButton('üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è'),
                       types.KeyboardButton('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫'), types.KeyboardButton("üíéPremium."),
                       types.KeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    if is_premium_user(user_id):
        bot.send_message(user_id, """
    ¬°Hola, amigo! üá™üá∏

    üßë‚Äçüíª <b>–í–∞—à —Ç–∞—Ä–∏—Ñ:</b> premium
    ‚è≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> –æ—Å—Ç–∞–ª–æ—Å—å 3 –º–∏–Ω / 10,000 —Ç–æ–∫–µ–Ω–æ–≤ GPT-3.5 
    üõ† <b>–í–∞—à —Ä–µ–∂–∏–º:</b> GPT-3.5
    üîî <b>–û–ø–æ–≤–µ—â–µ–Ω–∏—è:</b> –≤–∫–ª—é—á–µ–Ω–æ
    üåê <b>–Ø–∑—ã–∫:</b> —Å–∏—Å—Ç–µ–º–Ω—ã–π —è–∑—ã–∫

    üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ</b> –≤–∫–ª—é—á–∞–µ—Ç 3 –º–∏–Ω—É—Ç—ã —É—Å—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –≤ –¥–µ–Ω—å, –ª–∏–±–æ 10000 —Ç–æ–∫–µ–Ω–æ–≤.

    üíé <b>Premium —Ç–∞—Ä–∏—Ñ</b> –≤–∫–ª—é—á–∞–µ—Ç:
    ‚úÖ 15 –º–∏–Ω—É—Ç —É—Å—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    ‚úÖ 30 —Ç—ã—Å—è—á —Ç–æ–∫–µ–Ω–æ–≤ GPT-3.5 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    ‚úÖ 800 GPT-4o –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å (–¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, —Å–∞–π—Ç–∞–º–∏), —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π.

    –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –ø—Ä–µ–º–∏—É–º-–≤–µ—Ä—Å–∏—é —Å –≤–∞—Å –±—É–¥–µ—Ç –≤–∑–∏–º–∞—Ç—å—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ 499 —Ä—É–±–ª–µ–π, –ª–∏–±–æ 7 usd, –ø–æ–∫–∞ –≤—ã –Ω–µ –æ—Ç–∫–ª—é—á–∏—Ç–µ —ç—Ç—É –æ–ø—Ü–∏—é. –í–æ–∑–≤—Ä–∞—Ç –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω. –û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ –ø–æ QR-–∫–æ–¥—É, –∫–∞—Ä—Ç–µ.
    """, parse_mode="HTML", reply_markup=markup_profile)
    else:
        bot.send_message(user_id, """
    ¬°Hola, amigo! üá™üá∏

    üßë‚Äçüíª <b>–í–∞—à —Ç–∞—Ä–∏—Ñ:</b> –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
    ‚è≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> –æ—Å—Ç–∞–ª–æ—Å—å 3 –º–∏–Ω / 10,000 —Ç–æ–∫–µ–Ω–æ–≤ GPT-3.5 
    üõ† <b>–í–∞—à —Ä–µ–∂–∏–º:</b> GPT-3.5
    üîî <b>–û–ø–æ–≤–µ—â–µ–Ω–∏—è:</b> –≤–∫–ª—é—á–µ–Ω–æ (–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏, –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
    üåê <b>–Ø–∑—ã–∫:</b> —Å–∏—Å—Ç–µ–º–Ω—ã–π —è–∑—ã–∫

    üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ</b> –≤–∫–ª—é—á–∞–µ—Ç 3 –º–∏–Ω—É—Ç—ã —É—Å—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –≤ –¥–µ–Ω—å, –ª–∏–±–æ 10000 —Ç–æ–∫–µ–Ω–æ–≤.

    üíé <b>Premium —Ç–∞—Ä–∏—Ñ</b> –≤–∫–ª—é—á–∞–µ—Ç:
    ‚úÖ 15 –º–∏–Ω—É—Ç —É—Å—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    ‚úÖ 30 —Ç—ã—Å—è—á —Ç–æ–∫–µ–Ω–æ–≤ GPT-3.5 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    ‚úÖ 800 GPT-4o –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å (–¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, —Å–∞–π—Ç–∞–º–∏), —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π.

    –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –ø—Ä–µ–º–∏—É–º-–≤–µ—Ä—Å–∏—é —Å –≤–∞—Å –±—É–¥–µ—Ç –≤–∑–∏–º–∞—Ç—å—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ 499 —Ä—É–±–ª–µ–π, –ª–∏–±–æ 7 usd, –ø–æ–∫–∞ –≤—ã –Ω–µ –æ—Ç–∫–ª—é—á–∏—Ç–µ —ç—Ç—É –æ–ø—Ü–∏—é. –í–æ–∑–≤—Ä–∞—Ç –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω. –û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ –ø–æ QR-–∫–æ–¥—É, –∫–∞—Ä—Ç–µ.
    """, parse_mode="HTML", reply_markup=markup_profile)



@bot.message_handler(func=lambda message: message.text == 'üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è')
def handle_notification_button(message):
    user_id = message.from_user.id
    markup_notification = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    markup_notification.add(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å'), types.KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å'))

    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup_notification)

# Handler for enabling or disabling notifications
@bot.message_handler(func=lambda message: message.text in ['–í–∫–ª—é—á–∏—Ç—å', '–í—ã–∫–ª—é—á–∏—Ç—å'])
def handle_notification_preference(message):
    user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(row_width=1)
    markup.add(types.KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å"),
               types.KeyboardButton('üë• –ü—Ä–æ—Ñ–∏–ª—å'), types.KeyboardButton("üìü–ü–µ—Ä–µ–≤–æ–¥"),
               types.KeyboardButton("üÖ∞ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è"),
               types.KeyboardButton("‚ùì –ß—Ç–æ —ç—Ç–æ?"))
    if message.text == '–í–∫–ª—é—á–∏—Ç—å':
        notification_preferences[user_id] = True
        bot.reply_to(message, "–û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.", reply_markup = markup)
    else:
        notification_preferences[user_id] = False
        bot.reply_to(message, "–û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.", reply_markup = markup)




@bot.message_handler(func=lambda message: message.text in ['üåé –Ø–∑—ã–∫', 'üåé Idioma'])
def yazik_func(message):
    markup_language = types.ReplyKeyboardMarkup(row_width=1)
    markup_language.add(types.KeyboardButton("üá™üá∏ Espa√±ol"), types.KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π"))
    bot.send_message(message.chat.id, "Elige tu idioma preferido / –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫",
                     reply_markup=markup_language)


@bot.message_handler(func=lambda message: message.text == 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫')
def handle_transcribe_button(message):
    markup = types.ReplyKeyboardMarkup(row_width=1)
    markup.add(types.KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å"), types.KeyboardButton('üìù –ê—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç'),
               types.KeyboardButton('üë• –ü—Ä–æ—Ñ–∏–ª—å'), types.KeyboardButton("üìü–ü–µ—Ä–µ–≤–æ–¥"),
               types.KeyboardButton("‚ùì –ß—Ç–æ —ç—Ç–æ?"))
    time.sleep(3)
    bot.reply_to(message, '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—ã–ª —É—Å–ø–µ—à–µ–Ω ‚ôªÔ∏è',reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def back_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=1)
    markup.add(types.KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å"), types.KeyboardButton('üìù –ê—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç'),
               types.KeyboardButton('üë• –ü—Ä–æ—Ñ–∏–ª—å'), types.KeyboardButton("üìü–ü–µ—Ä–µ–≤–æ–¥"),
               types.KeyboardButton("‚ùì –ß—Ç–æ —ç—Ç–æ?"))
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —É—á–∏—Ç–µ–ª—å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ —á–µ–º —É–≥–æ–¥–Ω–æ", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üíéPremium.')
def handle_transcribe_button(message):
    user_id = message.from_user.id

    # Create inline keyboard markup for payment options
    markup_buy = types.InlineKeyboardMarkup()
    yoomoney_button = types.InlineKeyboardButton(text="Robokassa", callback_data='pay_robokassa')
    crypto_button = types.InlineKeyboardButton(text="Crypto", callback_data='pay_crypto')
    markup_buy.add(yoomoney_button, crypto_button)

    # Send a message prompting the user to choose a payment method
    bot.send_message(
        message.chat.id,  # Correct attribute is 'chat.id' instead of 'chat_id'
        "–í—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=markup_buy
    )

    # Create reply keyboard markup for main options
    markup = types.ReplyKeyboardMarkup(row_width=1)
    markup.add(
        types.KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å"),
        types.KeyboardButton('üìù –ê—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç'),
        types.KeyboardButton('üë• –ü—Ä–æ—Ñ–∏–ª—å'),
        types.KeyboardButton("üìü–ü–µ—Ä–µ–≤–æ–¥"),
        types.KeyboardButton("‚ùì –ß—Ç–æ —ç—Ç–æ?")
    )

    # Check if the user is a premium user and respond accordingly
    if is_premium_user(user_id):  # Ensure the function 'is_premium_user' is defined
        bot.reply_to(message, "–í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ –ø—Ä–µ–º–∏—É–º, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!", reply_markup=markup)
    else:
        bot.reply_to(message, "–ü—Ä–µ–º–∏—É–º –¥–∞—ë—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n ‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ –∏ —Ä–æ–ª–∏–∫–æ–≤ youtube (Premium)\n ‚úÖ –í–∫–ª—é—á–∏—Ç—å GPT-4o (Premium)\n ‚úÖ –ë–æ–ª—å—à–µ –º–∏–Ω—É—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ (Premium)\n", reply_markup=markup_buy)


@bot.message_handler(func=lambda message: message.text == '‚õ≥–í–∫–ª—é—á–∏—Ç—å GPT-4o')
def handle_transcribe_button(message):
    user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(row_width=1)
    markup.add(types.KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å"), types.KeyboardButton('üìù –ê—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç'),
               types.KeyboardButton('üë• –ü—Ä–æ—Ñ–∏–ª—å'), types.KeyboardButton("üìü–ü–µ—Ä–µ–≤–æ–¥"),
               types.KeyboardButton("‚ùì –ß—Ç–æ —ç—Ç–æ?"))
    if not is_premium_user(user_id):
        bot.reply_to(message, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=markup)
    else:
        bot.reply_to(message, "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å GPT-4o\n–ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π")
        markup_profile = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
        markup_profile.add(types.KeyboardButton('‚õ≥–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'), types.KeyboardButton('‚õî –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'))
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup_profile)


@bot.message_handler(func=lambda message: message.text == '‚õ≥–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å')
def activate_button(message):
    bot.reply_to(message, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, GPT-4o –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    markup = types.ReplyKeyboardMarkup(row_width=1)
    markup.add(types.KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å"),
               types.KeyboardButton("üÖ∞ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è"),
               types.KeyboardButton("üìü–ü–µ—Ä–µ–≤–æ–¥"),
               types.KeyboardButton('üë• –ü—Ä–æ—Ñ–∏–ª—å'),
               types.KeyboardButton("‚ùì –ß—Ç–æ —ç—Ç–æ?"))
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '‚õî –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å')
def deactivate_button(message):
    bot.reply_to(message, "GPT-4o –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    # Return to the initial keyboard layout
    markup = types.ReplyKeyboardMarkup(row_width=1)
    markup.add(types.KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å"),
               types.KeyboardButton("üÖ∞ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è"),
               types.KeyboardButton("üìü–ü–µ—Ä–µ–≤–æ–¥"),
               types.KeyboardButton('üë• –ü—Ä–æ—Ñ–∏–ª—å'),
               types.KeyboardButton("‚ùì –ß—Ç–æ —ç—Ç–æ?"))
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# Function to create pending_payments and orders tables if not exists
# Function to create pending_payments and orders tables if not exists
def create_tables():
    conn = sqlite3.connect('user_data.db')
    try:
        c = conn.cursor()
        c.execute('''
            CREATE TABLE IF NOT EXISTS pending_payments (
                user_id TEXT PRIMARY KEY,
                product_description TEXT
            )
        ''')
        c.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                order_id TEXT PRIMARY KEY,
                status TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
    finally:
        conn.close()


@bot.message_handler(commands=['buy777'])
def buy_handler(message):
    chat_id = message.chat.id
    # Create inline keyboard with two options: Robokassa and Crypto
    markup = types.InlineKeyboardMarkup()
    robokassa_button = types.InlineKeyboardButton(text="RoboKassa", callback_data='pay_robokassa')
    crypto_button = types.InlineKeyboardButton(text="Crypto", callback_data='pay_crypto')
    markup.add(robokassa_button, crypto_button)

    bot.send_message(chat_id,
                     "–í—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('pay_robokassa') or call.data.startswith('check_'))
def handle_payment_option(call):
    chat_id = call.message.chat.id
    if call.data == 'pay_robokassa':
        order_id = str(chat_id)  # Using chat ID as order ID
        product_description = "Payment for Service"  # Example product description
        payment_url = generate_payment_link(950.0, order_id, product_description)

        # Create inline keyboard with Pay and Check Payment options
        markup = types.InlineKeyboardMarkup()
        pay_button = types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)
        check_button = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f'check_{order_id}')
        markup.add(pay_button, check_button)

        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É —Å –ø–æ–º–æ—â—å—é RoboKassa:", reply_markup=markup)

        # Insert or replace the pending payment into the database
        conn = sqlite3.connect('user_data.db')
        try:
            c = conn.cursor()
            c.execute('INSERT OR REPLACE INTO pending_payments (user_id, product_description) VALUES (?, ?)',
                      (order_id, product_description))
            c.execute('INSERT OR REPLACE INTO orders (order_id, status) VALUES (?, ?)', (order_id, "pending"))
            conn.commit()
        finally:
            conn.close()
    elif call.data.startswith('check_'):
        order_id = call.data.split('_')[1]
        payment_status = check_payment_status(order_id)
        if payment_status == "Success":
            bot.send_message(chat_id, f'Payment status for order {order_id}: Success')
            update_order_status(order_id, "success")
            mark_as_premium(order_id)
            send_success_message(order_id, "Payment for Service")
        else:
            bot.send_message(chat_id, f'Payment status for order {order_id}: {payment_status}')


# Flask route for handling Robokassa ResultURL
@app.route('/result', methods=['POST'])
def result():
    request_data = request.form
    received_sum = request_data.get('OutSum')
    order_id = request_data.get('InvId')
    signature = request_data.get('SignatureValue')

    if check_signature_result(order_id, received_sum, signature, pass2):
        # Handle successful payment
        update_order_status(order_id, "success")
        product_description = request_data.get('Description')
        # Implement product delivery logic here
        if product_description == "Payment for Service":
            mark_as_premium(order_id)  # Example: Grant premium access
            send_success_message(order_id, product_description)  # Send success message for test payment
        elif product_description == "Another Product":
            # Handle other product/service delivery
            pass
        return 'OK' + order_id
    else:
        update_order_status(order_id, "failed")
        return 'Wrong Try again man..'

def send_success_message(order_id, product_description):
    try:
        if product_description == "Payment for Service":
            # Send specific message for test payment success
            bot.send_message(order_id, "YOUR KEY:RUIBAS&!*482471hd8a")
        else:
            # Handle other product success messages
            pass
    except Exception as e:
        print(f"Error sending message to {order_id}: {str(e)}")

# Function to verify signature from Robokassa
def check_signature_result(order_number: str, received_sum: str, received_signature: str, password: str) -> bool:
    signature = calculate_signature(order_number, received_sum, password)
    return signature.lower() == received_signature.lower()

# Function to check payment status via Robokassa API
def check_payment_status(order_id):
    signature = calculate_signature(merchant_login, order_id, pass1)
    params = {
        'MerchantLogin': merchant_login,
        'InvoiceID': order_id,
        'Signature': signature
    }
    response = requests.get('https://auth.robokassa.ru/Merchant/WebService/Service.asmx/OpState', params=params)
    if response.status_code == 200:
        result = response.text
        if result.startswith('OK'):
            return "Success"
        else:
            return "Pending"
    else:
        return "Failed"

def update_order_status(order_id, status):
    conn = sqlite3.connect('user_data.db')
    try:
        c = conn.cursor()
        c.execute('UPDATE orders SET status = ? WHERE order_id = ?', (status, order_id))
        conn.commit()
    finally:
        conn.close()

# Function to check pending payments and update status
def check_pending_payments():
    conn = sqlite3.connect('user_data.db')
    try:
        c = conn.cursor()
        c.execute('SELECT user_id FROM pending_payments')
        pending_payments = c.fetchall()
        for user_id in pending_payments:
            order_id = user_id[0]
            payment_status = check_payment_status(order_id)
            if payment_status == "Success":
                update_order_status(order_id, "success")
                mark_as_premium(order_id)
                send_success_message(order_id, "Payment for Service")  # Send success message for test payment
                c.execute('DELETE FROM pending_payments WHERE user_id = ?', (order_id,))
        conn.commit()
    finally:
        conn.close()

# Set up the scheduler to check pending payments
scheduler = BackgroundScheduler()
scheduler.add_job(check_pending_payments, 'interval', minutes=5)
scheduler.start()

# Flask route for handling success endpoint
@app.route('/success', methods=['GET'])
def success():
    order_id = request.args.get('InvId')
    # Handle success (e.g., show a success message)
    return f'Payment successful for order {order_id}'

# Flask route for handling fail endpoint
@app.route('/fail', methods=['GET'])
def fail():
    order_id = request.args.get('InvId')
    # Handle failure (e.g., show a failure message)
    return f'Payment failed for order {order_id}'

# Telegram bot command to start payment process
@bot.message_handler(commands=['start'])
def handle_start(message):
    markup = telebot.types.InlineKeyboardMarkup()
    pay_button = telebot.types.InlineKeyboardButton(text="PAY", callback_data="pay")
    check_payment_button = telebot.types.InlineKeyboardButton(text="Check Payment", callback_data="check_payment")
    markup.add(pay_button, check_payment_button)
    bot.send_message(message.chat.id, "Choose an action:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    if call.data == "pay":
        order_id = call.message.chat.id
        product_description = "Payment for Service"  # Example product description
        payment_link = generate_payment_link(950.0, order_id, product_description)
        bot.send_message(call.message.chat.id, f'Click the link to pay: {payment_link}')
        conn = sqlite3.connect('user_data.db')
        try:
            c = conn.cursor()
            c.execute('INSERT OR REPLACE INTO pending_payments (user_id, product_description) VALUES (?, ?)', (order_id, product_description))
            c.execute('INSERT OR REPLACE INTO orders (order_id, status) VALUES (?, ?)', (order_id, "pending"))
            conn.commit()
        finally:
            conn.close()
    elif call.data == "check_payment":
        order_id = call.message.chat.id
        payment_status = check_payment_status(order_id)
        if payment_status == "Success":
            bot.send_message(call.message.chat.id, f'Payment status for order {order_id}: Success')
            update_order_status(order_id, "success")
            mark_as_premium(order_id)
            send_success_message(order_id, "Payment for Service")
        else:
            bot.send_message(call.message.chat.id, f'Payment status for order {order_id}: {payment_status}')





# /saf command handler (clear used free periods)
@bot.message_handler(commands=['saf'])
def handle_saf(message):
    user_id = message.from_user.id
    if user_id == ADMIN_USER_ID:
        clear_used_free_periods()
        clear_premium_periods()
        bot.reply_to(message, "All used free periods have been cleared.")
    else:
        bot.reply_to(message, "You are not authorized to use this command.")


# Callback query handler for checking payment
@bot.callback_query_handler(func=lambda call: call.data.startswith('check'))
def check_handler(callback_query):
    payment_id = callback_query.data.split('_')[1]
    result = check(payment_id)
    if result:
        chat_id = result.get('chat_id')
        mark_as_premium(chat_id)  # Mark the user as a premium user
        bot.send_message(callback_query.message.chat.id, "O–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π Premium")
    else:
        bot.send_message(callback_query.message.chat.id, "–û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞")


# Function to check if user is within free period
def is_within_free_period(user_id):
    if user_id not in user_start_times:
        user_start_times[user_id] = time.time()
        return True
    start_time = user_start_times[user_id]
    elapsed_time = time.time() - start_time
    if elapsed_time > FREE_PERIOD:
        mark_free_period_used(user_id)
        return False
    return True


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id

    # Check if user is within free period or is a premium user
    if not is_within_free_period(user_id) and not is_premium_user(user_id):
        buy_handler(message.chat.id)  # Pass chat.id directly
        return

    if translation_enabled:
        # If translation mode is enabled
        if message.text:
            # Translate only the generated responses
            user_message = message.text
            user_message_with_reminder = f"–ü—Ä–∏–≤–µ—Ç —Ç—ã –±–æ–ª—å—à–µ –Ω–µ —è–∑—ã–∫–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç–µ–ª—å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ \n{user_message} –æ—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º, –≥–æ–≤–æ—Ä–∏ –æ—á–µ–Ω—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ "

            print("Generating response for text message...")
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            ai_response = loop.run_until_complete(generate_response(user_message_with_reminder))

            # Translate the generated response
            translation = translator.translate(ai_response, src='es', dest='ru')

            # Send original and translated messages
            bot.send_message(message.chat.id, f"{ai_response}")
            bot.send_message(message.chat.id, f"–ü–µ—Ä–µ–≤–æ–¥:\n\n{translation.text}")
    else:
        # If translation mode is off or message is empty, proceed with generating response
        if message.text:
            print("Text message received:", message.text)
            user_message = message.text
            user_message_with_reminder = f"–ü—Ä–∏–≤–µ—Ç —Ç—ã –±–æ–ª—å—à–µ –Ω–µ —è–∑—ã–∫–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç–µ–ª—å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ \n{user_message} –æ—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º, –≥–æ–≤–æ—Ä–∏ –æ—á–µ–Ω—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ "

            print("Generating response for text message...")
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            ai_response = loop.run_until_complete(generate_response(user_message_with_reminder))

            bot.reply_to(message, ai_response)


@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    user_id = message.from_user.id
    if not is_within_free_period(user_id) and not is_premium_user(user_id):
        buy_handler(message.chat.id)  # Pass chat.id directly
        return

    print("Voice message received.")
    file_info = bot.get_file(message.voice.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    print("Voice file downloaded.")

    with open('voice_message.ogg', 'wb') as new_file:
        new_file.write(downloaded_file)
    print("Voice file saved locally as 'voice_message.ogg'.")

    wav_file = convert_to_wav('voice_message.ogg')
    text = voice_to_text(wav_file, language="es-ES")  # Set the language to Spanish
    if text:
        print("Voice message converted to text:", text)
        user_message_with_reminder = f"–ü—Ä–∏–≤–µ—Ç —Ç—ã —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç–µ–ª—å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ \n{text} –æ—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º, –±–æ–ª—å—à–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–µ –Ω—É–∂–Ω—ã"

        print("Generating response for voice message...")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        ai_response = loop.run_until_complete(generate_response(user_message_with_reminder))

        print("Converting text response to speech...")
        speech_file = text_to_speech(ai_response, language="es")  # Set the TTS language to Spanish

        translation = translator.translate(ai_response, src='es', dest='ru')

        print("Sending voice response...")

        # Check if transcription is enabled
        if translation_enabled:
            # Send both voice and text messages
            bot.send_voice(message.chat.id, open(speech_file, 'rb'))
            escaped_ai_response = escape_markdown_v2(ai_response)
            spoiler_text = f"||{escaped_ai_response}||"
            bot.send_message(message.chat.id, spoiler_text, parse_mode='MarkdownV2')
            bot.send_message(message.chat.id, translation.text)
        else:
            # Send only the voice message
            bot.send_voice(message.chat.id, open(speech_file, 'rb'))

        logging.info("Voice response and text sent.")
    else:
        print("Could not understand the voice message.")
        bot.reply_to(message, "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞, —è –≤–∞—Å –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª")


# Ensure database and tables are created
create_tables()


logging.basicConfig(level=logging.INFO)

# Start polling
print("Bot is starting...")
bot.polling()

while True:
    schedule.run_pending()
    time.sleep(60)
